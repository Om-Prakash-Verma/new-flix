/**
 * @fileOverview Firestore Security Rules for FlixSphere.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and media lists.
 * Only authenticated users can access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /users/{userId}/mediaLists/{mediaListId}: Stores media lists for each user, accessible only by the user themselves.
 * - /mediaItems/{mediaItemId}: Stores public information about media items, readable by everyone, but only updatable by a dedicated admin role (currently not implemented).
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized data access.
 * - Read-only access is granted to the /mediaItems collection as it contains public information.
 * - All write operations require user authentication and ownership validation.
 *
 * Denormalization for Authorization:
 * The `userId` field is denormalized into the `UserMediaList` documents to enable independent authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile information, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID matching the userId can create their profile.
     * @allow (get, update, delete) - Authenticated user with UID matching the userId can read, update, and delete their profile.
     * @deny (create, get, update, delete) - Any unauthenticated user.
     * @deny (get, update, delete) - Authenticated user with UID not matching the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures user media lists, allowing only the owner to manage their lists.
     * @path /users/{userId}/mediaLists/{mediaListId}
     * @allow (create) - Authenticated user with UID matching the userId can create a media list.
     * @allow (get, list, update, delete) - Authenticated user with UID matching the userId can read, list, update, and delete their media lists.
     * @deny (create, get, list, update, delete) - Any unauthenticated user.
     * @deny (get, list, update, delete) - Authenticated user with UID not matching the userId.
     * @principle Enforces document ownership for all operations on media lists.
     */
    match /users/{userId}/mediaLists/{mediaListId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Provides public read access to media item information, but restricts write access.
     * @path /mediaItems/{mediaItemId}
     * @allow (get, list) - Any user can read media item information.
     * @deny (create, update, delete) - All users are denied write access (admin role needed).
     * @principle Allows public read access while restricting write access to authorized users.
     */
    match /mediaItems/{mediaItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}